<?xml version="1.0" encoding="UTF-8"?>
<project name="OasisGrangerMobile" >

  <!-- The local.properties file is created and updated by the 'android' tool.
                    It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems. -->
    <property environment="env"/>

    <property file="local.properties" />


    <!-- The ant.properties file can be created by you. It is only edited by the
                                    'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
             <property file="ant.properties" />

             <!-- The project.properties file is created and updated by the 'android'
                          tool, as well as ADT.

                                   This contains project specific properties such as project target, and library
                                            dependencies. Lower level build properties are stored in ant.properties
                                                     (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <property file="project.properties" />

    <!-- quick check on sdk.dir -->
    <fail
      message="sdk.dir is missing. Make sure to generate local.properties using 'android update project'"
      unless="sdk.dir"
      />

    <path id="classpath.base">
      <pathelement location="./bin/classes" />
    </path>

    <path id="classpath.test">
      <pathelement location="../app/libs/FlurryAgent.jar" />
      <pathelement location="../app/libs/guice-3.0-no_aop.jar" />
      <pathelement location="../app/libs/gson-2.0.jar" />
      <pathelement location="../app/libs/javax.inject.jar" />
      <pathelement location="../unit/libs/robolectric-1.2-jar-with-dependencies.jar" />
      <pathelement location="../unit/libs/junit-4.10.jar" />
      <pathelement location="../unit/libs/maps.jar" />
      <pathelement location="../unit/libs/android-support-v4.jar" />
      <pathelement location="${sdk.dir}/platforms/android-15/android.jar" />
      <pathelement location="../unit/libs/mockito-all-1.9.0.jar" />
      <pathelement location="${out.test.dir}" />
      <path refid="classpath.base" />
    </path>


    <target name="compile-tests">
      <mkdir dir="${out.test.dir}" />
      <javac srcdir="${test.dir}" destdir="${out.test.dir}" includeantruntime="false" verbose="false">
        <classpath refid="classpath.test"/>
      </javac>
    </target>

    <target name="test" depends="compile-tests">
      <mkdir dir="${reports.tests}" />
      <junit fork="yes" forkmode="once" printsummary="yes" haltonfailure="${fail.on.broken.tests}">
        <formatter type="xml"/>
        <formatter type="plain" usefile="false"/>
        <classpath refid="classpath.test"/>
        <batchtest todir="${reports.tests}">
          <fileset dir="${test.dir}">
            <include name="**/*Test.java"/>
          </fileset>
        </batchtest>
      </junit>
    </target>

    <target name="uninstall">
      <exec executable="${sdk.dir}/platform-tools/adb">
        <arg value="uninstall"/>
        <arg value="com.oasisgranger"/>
      </exec>
    </target>

    <target name="-build-configuration">
      <delete file="./res/raw/build.properties"/>
      <touch file="./res/raw/build.properties"/>

      <if condition="${build.is.packaging.debug}">
        <then>
          <echo>setting build configuration for debug</echo>
          <echo file="./res/raw/build.properties" message="build.configuration=DEBUG" append="false"/>
        </then>
        <else>
          <echo>setting build configuration for release</echo>
          <echo file="./res/raw/build.properties" message="build.configuration=RELEASE" append="false"/>
        </else>
      </if>
    </target>

    <target name="-pre-build" depends="clean,-build-configuration">
      <echo>Rebuild output directories if needed...</echo>
      <mkdir dir="${resource.absolute.dir}" />
      <mkdir dir="${jar.libs.absolute.dir}" />
      <mkdir dir="${out.absolute.dir}" />
      <mkdir dir="${out.res.absolute.dir}" />
      <do-only-if-manifest-hasCode>
        <mkdir dir="${gen.absolute.dir}" />
        <mkdir dir="${out.classes.absolute.dir}" />
      </do-only-if-manifest-hasCode>
    </target>

    <target name="-remove-dev-from-manifest">

      <if condition="${build.is.packaging.debug}">
        <then>
          <echo>... dubug target skipping ..</echo>
        </then>
        <else>
          <copyfile src="./AndroidManifest.xml" dest="${tmp_manifest}"/>
          <exec executable="python">
            <arg value="../tools/removeTestAutomation.py"/>
            <arg value="./AndroidManifest.xml" />
          </exec>
        </else>
      </if>
    </target>

    <target name="-package-resources" depends="-pre-package-resources,-execute-package-resources,-post-package-resources"/>
    <target name="-pre-package-resources" depends="-remove-dev-from-manifest, -crunch"/>
    <target name="-execute-package-resources" >
      <!-- only package resources if *not* a library project -->
      <do-only-if-not-library elseText="Library project: do not package resources..." >
        <aapt executable="${aapt}"
          command="package"
          versioncode="${version.code}"
          versionname="${version.name}"
          debug="${build.is.packaging.debug}"
          manifest="AndroidManifest.xml"
          assets="${asset.absolute.dir}"
          androidjar="${android.jar}"
          apkfolder="${out.absolute.dir}"
          nocrunch="${build.packaging.nocrunch}"
          resourcefilename="${resource.package.file.name}"
          resourcefilter="${aapt.resource.filter}"
          projectLibrariesResName="project.libraries.res"
          projectLibrariesPackageName="project.libraries.package"
          previousBuildType="${build.last.target}"
          buildType="${build.target}">
          <res path="${out.res.absolute.dir}" />
          <res path="${resource.absolute.dir}" />
          <!-- <nocompress /> forces no compression on any files in assets or res/raw -->
          <!-- <nocompress extension="xml" /> forces no compression on specific file extensions in assets and res/raw -->
        </aapt>

      </do-only-if-not-library>
    </target>
    <target name="-post-package-resources" >
      <if condition="${build.is.packaging.debug}">
        <then>
          <echo>... dubug target skipping ..</echo>
        </then>
        <else>
          <delete file="AndroidManifest.xml" verbose="${verbose}" />
          <copyfile src="${tmp_manifest}" dest="AndroidManifest.xml" />
          <delete file="${tmp_manifest}" verbose="${verbose}" />
        </else>
      </if>
    </target>

    <!-- extension targets. Uncomment the ones where you want to do custom work
                                                                                  in between standard targets -->
<!--
         <target name="-post-compile" depends="test"/>
    <target name="-pre-build">
          </target>
              <target name="-pre-compile">
                    </target>

                        /* This is typically used for code obfuscation.
                               Compiled code location: ${out.classes.absolute.dir}
       If this is not done in place, override ${out.dex.input.absolute.dir} */
    <target name="-post-compile">
    </target>
-->

    <!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
             -->
    <!-- version-tag: 1 -->
    <import file="${sdk.dir}/tools/ant/build.xml" />

  </project>

